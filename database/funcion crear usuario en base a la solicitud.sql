CREATE OR REPLACE FUNCTION VERIFICAR_CONTRASENA(contrasena VARCHAR)
RETURNS BOOLEAN AS 
$$
BEGIN
-- Verificar si la contraseña cumple con las condiciones
IF NOT LENGTH(contrasena) >= 8 THEN
RAISE NOTICE 'LA CONTRASEÑA DEBE TENER ALMENOS 8 CARACTERES ';
RETURN FALSE;
END IF;
IF NOT contrasena ~ '[A-Z]' THEN
 	RAISE NOTICE 'NO CONTIENE MAYUSCULAS';
	RETURN FALSE;
END IF;
        
IF NOT contrasena ~ '[a-z]' THEN
    RAISE NOTICE 'NO TIENE MINUSCULAS';
	RETURN FALSE;
END IF;
        
IF NOT contrasena ~ '[!@#$%^&*().,]' THEN
    RAISE NOTICE 'NO TIENE CARACTER ESPECIAL';
	RETURN FALSE;
END IF;
        
IF POSITION(' ' IN contrasena) >=1 THEN
    RAISE NOTICE 'NO DEBE CONTENER ESPACIOS';
	RETURN FALSE;
END IF;
   
RAISE NOTICE 'LA CONTRASEÑA CUMPLE';
RETURN TRUE;

END;
$$ LANGUAGE plpgsql;
--SELECT VERIFICAR_CONTRASENA('Pa970409.')

CREATE OR REPLACE FUNCTION VERIFICAR_CORREO(correo VARCHAR)
RETURNS BOOLEAN
AS 
$$
BEGIN
    -- Verificar si el correo cumple con las condiciones
    IF NOT correo ~ '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]' THEN
        RAISE NOTICE 'EL CORREO NO ES VÁLIDO';
        RETURN FALSE;
    END IF;

    RAISE NOTICE 'EL CORREO ES VÁLIDO';
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

--SELECT VERIFICAR_CORREO('pablo@gmail.co')


--FUNCION PARA TRAER LA ULTIMA SOLICITUD REALIZADA POR EL USUARIO
CREATE OR REPLACE FUNCTION ultima_solicitud_usuario(DNI BIGINT) RETURNS BIGINT AS
$$
DECLARE  Ultima_Solicitud BIGINT;
BEGIN
SELECT MAX(id_solicitud) INTO Ultima_Solicitud FROM tab_SolicitarMembresia 
WHERE DNI_Persona=DNI;
IF Ultima_Solicitud IS NULL OR Ultima_Solicitud=0 THEN
	RAISE NOTICE 'EL USUARIO NO TIENE SOLICITUDES ';
	RETURN  Ultima_Solicitud;
ELSE 
	RAISE NOTICE 'El USUARIO PRESENTO LA SOLICITUD NUMERO %',Ultima_Solicitud;
	RETURN  Ultima_Solicitud;
END IF;
END;
$$
LANGUAGE PLPGSQL;
--SELECT ultima_solicitud_usuario(1097489445)

--FUNCION PARA REGISTRAR USUARIO EN BASE A LA ULTIMA SOLICITUD DEL USUARIO 
CREATE OR REPLACE FUNCTION REGISTRAR_USUARIO(DNI BIGINT) RETURNS BOOLEAN AS
$$
DECLARE RUsuario   RECORD;
DECLARE Numero_solicitud	BIGINT;
DECLARE 
BEGIN
SELECT ultima_solicitud_usuario(DNI) INTO Numero_solicitud;
SELECT a.usuario_deseado,a.Contrasena_Deseada INTO RUsuario FROM tab_solicitarmembresia a
WHERE DNI_Persona=DNI AND Id_Solicitud=Numero_solicitud ;
IF FOUND THEN
	INSERT INTO tab_Usuarios VALUES (RUsuario.usuario_Deseado,RUsuario.Contrasena_Deseada,DNI,1);
	IF FOUND THEN 
	RAISE NOTICE 'EL USUARIO FUE INSERTADO';
	RETURN TRUE;
	ELSE 
	RAISE NOTICE 'ALGO PASO PERO NO INSERTE ';
	RETURN FALSE;
	END IF;
END IF;
END;
$$
LANGUAGE PLPGSQL;

--SELECT REGISTRAR_USUARIO(1097489445)
CREATE OR REPLACE FUNCTION REGISTRAR_ASOCIADO (Documento BIGINT)RETURNS BOOLEAN AS
$$
DECLARE REC_ASOCIADO RECORD;
BEGIN
SELECT a.Usuario_ingreso,a.Contrasena_Ingreso,a.DNI_Usuario INTO REC_ASOCIADO FROM tab_Usuarios a
WHERE a.DNI_Usuario=Documento;
IF FOUND THEN
	INSERT INTO tab_Asociado VALUES(REC_ASOCIADO.DNI_Usuario,REC_ASOCIADO.Usuario_ingreso,CURRENT_TIMESTAMP);
	RETURN TRUE;
ELSE
	RAISE NOTICE 'NO PUDE ENCONTRAR AL USUARIO EN LA BASE DE DATOS';
	RETURN FALSE;
END IF;
END;
$$
LANGUAGE PLPGSQL;

--SELECT REGISTRAR_ASOCIADO (1095834123)


--CREATE OR REPLACE FUNCTION CREA_CUENTA_AHORROS() RETURNS BOOLEAN AS
--$$
--BEGIN

--END;
--$$
--LANGUAGE PLPGSQL;


